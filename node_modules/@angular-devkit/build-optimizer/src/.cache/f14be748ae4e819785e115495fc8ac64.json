{"remainingRequest":"D:\\Workspace\\Vinod\\AngularProjects\\Sample\\Angular-MyApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--8-1!D:\\Workspace\\Vinod\\AngularProjects\\Sample\\Angular-MyApp\\node_modules\\@ng-bootstrap\\ng-bootstrap\\util\\focus-trap.js","dependencies":[{"path":"D:\\Workspace\\Vinod\\AngularProjects\\Sample\\Angular-MyApp\\node_modules\\@ng-bootstrap\\ng-bootstrap\\util\\focus-trap.js","mtime":499162500000},{"path":"D:\\Workspace\\Vinod\\AngularProjects\\Sample\\Angular-MyApp\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1529959641847},{"path":"D:\\Workspace\\Vinod\\AngularProjects\\Sample\\Angular-MyApp\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["import { fromEvent } from 'rxjs';\r\nimport { filter, map, takeUntil, withLatestFrom } from 'rxjs/operators';\r\nvar Key = /*@__PURE__*/ (function (Key) {\r\n    Key[Key[\"Tab\"] = 9] = \"Tab\";\r\n    return Key;\r\n})({});\r\nvar FOCUSABLE_ELEMENTS_SELECTOR = [\r\n    'a[href]', 'button:not([disabled])', 'input:not([disabled]):not([type=\"hidden\"])', 'select:not([disabled])',\r\n    'textarea:not([disabled])', '[contenteditable]', '[tabindex]:not([tabindex=\"-1\"])'\r\n].join(', ');\r\n/**\r\n * Returns first and last focusable elements inside of a given element based on specific CSS selector\r\n */\r\nfunction getFocusableBoundaryElements(element) {\r\n    var list = element.querySelectorAll(FOCUSABLE_ELEMENTS_SELECTOR);\r\n    return [list[0], list[list.length - 1]];\r\n}\r\n/**\r\n * Function that enforces browser focus to be trapped inside a DOM element.\r\n *\r\n * Works only for clicks inside the element and navigation with 'Tab', ignoring clicks outside of the element\r\n *\r\n * @param element The element around which focus will be trapped inside\r\n * @param stopFocusTrap$ The observable stream. When completed the focus trap will clean up listeners\r\n * and free internal resources\r\n */\r\nexport var ngbFocusTrap = function (element, stopFocusTrap$) {\r\n    // last focused element\r\n    var lastFocusedElement$ = fromEvent(element, 'focusin').pipe(takeUntil(stopFocusTrap$), map(function (e) { return e.target; }));\r\n    // 'tab' / 'shift+tab' stream\r\n    fromEvent(element, 'keydown')\r\n        .pipe(takeUntil(stopFocusTrap$), filter(function (e) { return e.which === Key.Tab; }), withLatestFrom(lastFocusedElement$))\r\n        .subscribe(function (_a) {\r\n        var tabEvent = _a[0], focusedElement = _a[1];\r\n        var _b = getFocusableBoundaryElements(element), first = _b[0], last = _b[1];\r\n        if (focusedElement === first && tabEvent.shiftKey) {\r\n            last.focus();\r\n            tabEvent.preventDefault();\r\n        }\r\n        if (focusedElement === last && !tabEvent.shiftKey) {\r\n            first.focus();\r\n            tabEvent.preventDefault();\r\n        }\r\n    });\r\n    // inside click\r\n    fromEvent(element, 'click')\r\n        .pipe(takeUntil(stopFocusTrap$), withLatestFrom(lastFocusedElement$), map(function (arr) { return arr[1]; }))\r\n        .subscribe(function (lastFocusedElement) { return lastFocusedElement.focus(); });\r\n};\r\n//# sourceMappingURL=focus-trap.js.map\r\n",null]}